---
title: Fitting an hospitalizations only model
format: gfm
engine: jupyter
---

This document illustrates how a hospitalization-only model can be fitted using data from the Pyrenew package, particularly the wastewater dataset. The CFA wastewater team created this dataset, which contains simulated data.

```{python}
#| label: setup
import polars as pl
from pyrenew.datasets import load_wastewater
from pyrenew.model import HospitalizationsModel
```

## Data processing

We start by loading the data and inspecting the first five rows.

```{python}
#| label: data-inspect
dat = load_wastewater()
dat.head(5)
```

The data shows one entry per site. We will take the aggregated data for all sites by date.

```{python}
#| label: aggregation
dat = dat.group_by("date").agg(
    hospitalizations = pl.sum("daily_hosp_admits"),
    population = pl.sum("pop"),
)

# Now, sorting by date
dat = dat.sort("date")

dat.head(5)
```

Let's take a look at the daily prevalence of hospitalizations.

```{python}
#| label: plot-hospitalizations
import matplotlib.pyplot as plt

# Rotating the x-axis labels, and only showing ~10 labels
ax = plt.gca()
ax.xaxis.set_major_locator(plt.MaxNLocator(nbins=10))
ax.xaxis.set_tick_params(rotation=45)
plt.plot(dat["date"].to_numpy(), dat["hospitalizations"].to_numpy())
plt.xlabel("Date")
plt.ylabel("Hospitalizations")
plt.show()
```

## Building the model

First, we will extract two datasets that we will use as deterministic quantities, the generation interval and the infection to hospitalization interval.

```{python}
#| label: data-extract
from pyrenew.datasets import (
    load_generation_interval,
    load_infection_admission_interval,
)

gen_int = load_generation_interval()
inf_hosp_int = load_infection_admission_interval()

# We only need the probability_mass column of each dataset
gen_int = gen_int["probability_mass"].to_numpy()
inf_hosp_int = inf_hosp_int["probability_mass"].to_numpy()

# Taking a pick at the first 5 elements of each
gen_int[:5], inf_hosp_int[:5]
```

With these two in hand, we can start building the model. First, we will define the latent hospitalizations.

```{python}
#| label: latent-hosp
from pyrenew.latent import HospitalAdmissions, InfectHospRate
from pyrenew.deterministic import DeterministicPMF
import jax.numpy as jnp
import numpyro.distributions as dist

inf_hosp_int = DeterministicPMF((inf_hosp_int,))

hosp_rate = InfectHospRate(
    dist=dist.LogNormal(jnp.log(0.05), 0.05)
)

latent_hosp = HospitalAdmissions(
    infection_to_admission_interval=inf_hosp_int,
    infect_hosp_rate_dist=hosp_rate,
    )
```

Now we can define the rest of the other model components:

```{python}
#| label: initializing-rest-of-model
from pyrenew.model import HospitalizationsModel
from pyrenew.latent import Infections, Infections0
from pyrenew.process import RtRandomWalkProcess
from pyrenew.observation import NegativeBinomialObservation

# Infection process
latent_inf = Infections()
I0 = Infections0()

# Generation interval and Rt
gen_int = DeterministicPMF((gen_int,))
process = RtRandomWalkProcess()

# The observation model
obs = NegativeBinomialObservation(concentration_prior=0.1)
```

Notice all the components are `RandomVariable` instances. We can now build the model:

```{python}
#| label: init-model
model = HospitalizationsModel(
    latent_infections=latent_inf,
    latent_hospitalizations=latent_hosp,
    I0=I0,
    gen_int=gen_int,
    Rt_process=process,
    observed_hospitalizations=obs,
)
```

Let's run a simulation to check if the model is working:

```{python}
#| label: simulation
import numpyro as npro
import numpy as np

np.random.seed(223)
with npro.handlers.seed(rng_seed = np.random.randint(1, 60)):
    sim_data = model.sample(n_timepoints=60)
```

```{python}
#| label: basic-fig
#| fig-cap: Rt and Infections
#| fig-cap-location: bottom
import matplotlib.pyplot as plt

fig, axs = plt.subplots(1, 2)

# Rt plot
axs[0].plot(range(0, 61), sim_data[0])
axs[0].set_ylabel('Rt')

# Infections plot
axs[1].plot(range(0, 61), sim_data[1])
axs[1].set_ylabel('Infections')

fig.suptitle('Basic renewal model')
fig.supxlabel('Time')
plt.tight_layout()
plt.show()
```
