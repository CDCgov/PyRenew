---
title: Time handling in pyrenew
format: gfm
engine: jupyter
---

Every `pyrenew` model has a _fundamental discrete time unit_. All time-aware arrays used in the model should have units expressible as integer multiples of this fundamental unit.

The fundamental time unit should represent a period of fixed (or approximately fixed) duration. That is, "days" could make for a good fundamental time unit; "months" would not, since different months represent different absolute lengths of time.

For many infectious disease renewal models of interest, the fundamental time unit will be days, and we will proceed with this tutorial treating days as our fundamental unit.

`pyrenew` deals with time by having `RandomVariable`s carry information about

1. their own time unit expressed relative to the fundamental unit (`t_unit`) and
2. the starting time, `t_start`, measured relative to `t = 0` in model time in fundamental time units.

Return values from `RandomVariable.sample()` are `tuples` or `namedtuple`s of `SampledValue` objects. `SampledValue` objects can have `t_start` and `t_unit` attributes.

By default, `SampledValue` objects carry the `t_start` and `t_unit` of the `RandomVariable` from which they are `sample()`-d. One might override this default to allow a `RandomVariable.sample()` call to produce multiple `SampledValue`s with different time-units, or with different start-points relative to the `RandomVariable`'s own `t_start`.

The `t_unit, t_start` pair can encode different types of time series data. For example:

| Description | `t_unit` | `t_start` |
|:-----------------|----------------:|-----------------:|
| Daily starting on day two | 1               | 1                |
| Weekly starting on week two | 7               | 7                |
| Daily starting on day 40 | 1               | 39               |
| Biweekly starting on day 40 | 14              | 39               |
| Daily, with the first observation starting five days before the model (as in the initialization process) | 1               | -5               |


## How it relates to periodicity

The `tile_until_n()` and `repeat_until_n()` functions provide a way of tiling and repeating data accounting starting time, but it does not encode the time unit, only the period length and starting point. Furthermore, samples returned from `PeriodicEffect()` and `RtPeriodicDiffProcess()` both currently return daily values shifted so that the first entry of their arrays matches day 0 in the model.

## Unimplemented features

The following section describes some preliminary design principles that may be included in future versions of `pyrenew`.

### Array alignment

Using `t_unit` and `t_start`, random variables should be able to align input and output data. For example, in the case of the `RtInfectionsRenewalModel()`, the computed values of `Rt` and `infections` are padded left with `nan` values to account for the initialization process. Instead, we expect to either pre-process the padding leveraging the `t_start` information of the involved variables or simplify the process via a function call that aligns the arrays. A possible implementation could be a method `align()` that takes a list of random variables and aligns them based on the `t_unit` and `t_start` information, e.g.:

```python
Rt_aligned, infections_aligned = align([Rt, infections])
```

### Retrieving time information from sites

Future versions of `pyrenew` could include a way to retrieve the time information for sites keyed by site name the model.
